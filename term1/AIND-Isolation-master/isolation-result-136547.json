{
    "critiques": {
        "680": {
            "rubric_items": {
                "5510": {
                    "autograded": true,
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 6. Test the interface of AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 361, in get_move\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your AlphaBetaAgent.alphabeta function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board (not calling one of your heuristic functions directly) and verify your stopping conditions. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.\n\nExpected leaf nodes:\n{((1, 7), (4, 3)), ((2, 8), (4, 3)), ((5, 7), (4, 3)), ((2, 4), (4, 3)), ((1, 5), (4, 3)), ((5, 5), (4, 3)), ((4, 8), (4, 3))}\nOptional leaf nodes:\nset()\nLeaf nodes your agent evaluated:\n{((0, 7), (3, 1)), ((1, 6), (2, 2)), ((3, 8), (3, 1)), ((1, 6), (5, 1)), ((0, 7), (5, 5)), ((6, 7), (5, 5)), ((6, 5), (6, 2)), ((1, 2), (6, 2)), ((4, 7), (3, 1)), ((2, 3), (3, 1)), ((0, 5), (3, 1)), ((4, 7), (2, 2)), ((1, 2), (5, 5)), ((0, 5), (6, 2)), ((3, 8), (5, 1)), ((6, 5), (5, 1)), ((0, 7), (2, 2)), ((0, 3), (5, 1)), ((2, 5), (5, 1)), ((1, 2), (2, 2)), ((4, 7), (2, 4)), ((4, 7), (6, 2)), ((6, 5), (2, 2)), ((2, 7), (5, 1)), ((7, 8), (2, 2)), ((6, 5), (2, 4)), ((2, 3), (2, 4)), ((0, 5), (2, 4)), ((1, 2), (3, 1)), ((0, 3), (3, 1)), ((2, 5), (3, 1)), ((3, 2), (5, 1)), ((0, 5), (5, 5)), ((2, 5), (6, 2)), ((3, 8), (6, 2)), ((2, 3), (2, 2)), ((0, 5), (2, 2)), ((0, 5), (5, 1)), ((6, 7), (6, 2)), ((0, 7), (6, 2)), ((0, 3), (2, 4)), ((2, 5), (2, 4)), ((3, 2), (3, 1)), ((2, 7), (2, 4)), ((3, 8), (2, 2)), ((1, 6), (3, 1)), ((3, 2), (2, 2)), ((2, 7), (6, 2)), ((0, 3), (5, 5)), ((2, 5), (5, 5)), ((2, 7), (5, 5)), ((7, 4), (2, 2)), ((1, 6), (6, 2)), ((6, 5), (3, 1)), ((7, 6), (2, 2)), ((6, 5), (5, 5)), ((2, 7), (2, 2)), ((6, 7), (3, 1)), ((6, 7), (2, 4)), ((3, 8), (5, 5)), ((0, 3), (2, 2)), ((2, 5), (2, 2)), ((1, 2), (5, 1)), ((0, 7), (5, 1)), ((3, 8), (2, 4)), ((1, 6), (2, 4)), ((2, 7), (3, 1)), ((6, 7), (2, 2)), ((6, 7), (5, 1)), ((4, 7), (5, 1)), ((1, 6), (5, 5)), ((0, 3), (6, 2)), ((0, 7), (2, 4))}\nSkipped nodes:\n{((1, 7), (4, 3)), ((2, 8), (4, 3)), ((5, 7), (4, 3)), ((2, 4), (4, 3)), ((1, 5), (4, 3)), ((5, 5), (4, 3)), ((4, 8), (4, 3))}\nExtra nodes:\n{((1, 6), (2, 2)), ((3, 8), (3, 1)), ((1, 2), (6, 2)), ((4, 7), (3, 1)), ((0, 5), (3, 1)), ((4, 7), (2, 2)), ((1, 2), (5, 5)), ((0, 3), (5, 1)), ((0, 3), (3, 1)), ((3, 2), (5, 1)), ((0, 5), (5, 5)), ((2, 3), (2, 2)), ((0, 5), (5, 1)), ((6, 7), (6, 2)), ((3, 2), (3, 1)), ((2, 7), (2, 4)), ((2, 5), (5, 5)), ((7, 6), (2, 2)), ((6, 7), (2, 4)), ((2, 5), (2, 2)), ((1, 2), (5, 1)), ((0, 7), (5, 1)), ((3, 8), (2, 4)), ((4, 7), (5, 1)), ((1, 6), (5, 5)), ((0, 3), (6, 2)), ((1, 6), (5, 1)), ((6, 5), (5, 1)), ((2, 5), (5, 1)), ((1, 2), (2, 2)), ((4, 7), (6, 2)), ((7, 8), (2, 2)), ((2, 3), (2, 4)), ((7, 4), (2, 2)), ((6, 5), (3, 1)), ((0, 3), (5, 5)), ((6, 5), (5, 5)), ((6, 7), (3, 1)), ((3, 8), (5, 5)), ((1, 6), (2, 4)), ((6, 7), (2, 2)), ((0, 7), (3, 1)), ((0, 7), (5, 5)), ((6, 7), (5, 5)), ((0, 5), (6, 2)), ((0, 7), (2, 2)), ((0, 5), (2, 4)), ((1, 2), (3, 1)), ((3, 8), (6, 2)), ((2, 5), (2, 4)), ((2, 7), (6, 2)), ((6, 5), (2, 2)), ((2, 7), (5, 5)), ((1, 6), (6, 2)), ((6, 7), (5, 1)), ((0, 7), (2, 4)), ((2, 3), (3, 1)), ((3, 8), (5, 1)), ((4, 7), (2, 4)), ((2, 7), (5, 1)), ((6, 5), (2, 4)), ((2, 5), (3, 1)), ((0, 5), (2, 2)), ((0, 7), (6, 2)), ((0, 3), (2, 4)), ((3, 8), (2, 2)), ((1, 6), (3, 1)), ((3, 2), (2, 2)), ((2, 7), (2, 2)), ((0, 3), (2, 2)), ((2, 7), (3, 1)), ((6, 5), (6, 2)), ((2, 5), (6, 2))}\n\nTest Case Details:\n------------------\nHeuristic: open_move_score\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   |   |   |   | \n1  |   |   |   |   |   |   |   |   |   | \n2  |   |   |   |   |   |   |   |   |   | \n3  |   |   |   |   | - | - | 1 |   |   | \n4  |   |   | - | 2 | - | - | - |   |   | \n5  |   |   |   |   |   |   | - |   |   | \n6  |   |   |   | - | - |   | - |   |   | \n7  |   |   |   |   |   |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 57]\n\n\n\nFailed Test: 8. Test that alphabeta() raises SearchTimeout when the timer expires\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 616, in alphabeta\n    key=lambda m: self.min_value1(game.forecast_move(m),alpha,beta,0,depth))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 616, in <lambda>\n    key=lambda m: self.min_value1(game.forecast_move(m),alpha,beta,0,depth))\n\n                     ...lines elided for space...                     \n\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 508, in max_value1\n    v = max(v, self.min_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 529, in min_value1\n    v = min(v, self.max_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 508, in max_value1\n    v = max(v, self.min_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 529, in min_value1\n    v = min(v, self.max_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 508, in max_value1\n    v = max(v, self.min_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 529, in min_value1\n    v = min(v, self.max_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 508, in max_value1\n    v = max(v, self.min_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 529, in min_value1\n    v = min(v, self.max_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 508, in max_value1\n    v = max(v, self.min_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 529, in min_value1\n    v = min(v, self.max_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 508, in max_value1\n    v = max(v, self.min_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 529, in min_value1\n    v = min(v, self.max_value1(game.forecast_move(move), alpha, beta, current_depth+1, depth_cutoff))\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 500, in max_value1\n    return self.score(game,self)\n  File \"/home/vmuser_amdgrtfo/testcases.py\", line 575, in score\n    \"each call to avoid timeout. {1}\").format(search_name, self.timer())\nRuntimeError: Your alphabeta agent called the score_fn after the timer fell below 0 milliseconds remaining.  If you call any helper functions in your alphabeta search, then you need to check the timer inside each call to avoid timeout. -0.01061600000002727\n\n\nFailed Test: 9. Test iterative deepening in AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 361, in get_move\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 10. Test that AlphaBetaPlayer successfully plays a full game\n----------------------------------------------------------------------\nTraceback (most recent call last):\nNotImplementedError\n\nDuring handling of the above exception, another exception occurred:\n\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\nException: \n\n\nFailed Test: 12. Test output interface of custom_score_2()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 77, in custom_score_2\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 13. Test output interface of custom_score_3()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vmuser_amdgrtfo/workspace/game_agent.py\", line 105, in custom_score_3\n    raise NotImplementedError\nNotImplementedError\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n1. Test output interface of MinimaxPlayer.minimax():                   .\n2. Test functionality of MinimaxPlayer.minimax():                      .\n3. Test that minimax() raises SearchTimeout when the timer expires:    .\n4. Test that MinimaxPlayer successfully plays a full game:             .\n5. Test interface of AlphaBetaPlayer.alphabeta():                      .\n6. Test the interface of AlphaBetaPlayer.get_move():                   E\n7. Test functionality of AlphaBetaPlayer.alphabeta():                  F\n8. Test that alphabeta() raises SearchTimeout when the timer expires:  E\n9. Test iterative deepening in AlphaBetaPlayer.get_move():             E\n10. Test that AlphaBetaPlayer successfully plays a full game:          F\n11. Test output interface of custom_score():                           .\n12. Test output interface of custom_score_2():                         E\n13. Test output interface of custom_score_3():                         E\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```",
                    "result": "failed"
                },
                "7303": {
                    "autograded": true,
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 14. Submission includes heuristic_analysis.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\n\n\nFailed Test: 15. Submission includes research_review.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named research_review.pdf for review.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n14. Submission includes heuristic_analysis.pdf:                        F\n15. Submission includes research_review.pdf:                           F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```",
                    "result": "failed"
                }
            }
        }
    }
}